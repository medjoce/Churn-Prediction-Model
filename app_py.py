# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aeSiQf4sPIV685_0F0SK_JNxZ_Ko2qWb
"""

import pickle
import streamlit as st
import pandas as pd


st.write(
    """
# Employee Churn Prediction
This app predicts if a employee will leave the company or not.
"""
)

st.markdown(
    """
<style>
.big-font {
    font-size:50px !important;
}
</style>
""",
    unsafe_allow_html=True,
)

RF_model=pickle.load(open("RF.pkl","rb"))

col11, col12 = st.columns(2)

salary = col11.selectbox('salary',('low','medium','high'))
department = col12.selectbox('Departments',('sales','IT','accoounting','HR','technical','support','management','marketing','random','product management'))

col13, col14, col15 = st.columns(3)

job_satisfaction = col13.slider(
    'satisfaction_level',
    min_value=0,
    max_value=1,
    value=0,
)

last_evaluation = col14.slider(
    'last_evaluation',
    min_value=0,
    max_value=1,
    value=0,
)
number_projects = col15.slider(
    'number_projects',
    min_value=1,
    max_value=7,
    value=0,
)

col41, col42, col43, col44 = st.columns(4)

monthly_hours = col41.slider(
    'average_monthly_hours',
    min_value=140,
    max_value=257,
    value=0,
)
time_spent_company = col42.slider(
    'time_spent_company',
    min_value=1,
    max_value=10,
    value=0,
)

work_accident = col43.slider(
    'work_accident',
    min_value=0,
    max_value=1,
    value=0,
)

promotion_last_5years = col44.slider(
    'promotion_last_5years',
    min_value=0,
    max_value=1,
    value=0,
)


Data = {
    'Department': department,
    'Salary': salary,
    'JobSatisfaction': job_satisfaction,
    'LastEvaluation Score': last_evaluation,
    'YearsAtCompany': time_spent_company,
    'Promotion in last 5 years': promotion_last_5years,
    'Accidents at work': work_accident,
    'Average Monthly hours': monthly_hours,
    'Number of projects worked on': number_projects

}


st.markdown("<h3></h3>", unsafe_allow_html=True)
st.write('Overview of input is shown below')
st.markdown("<h3></h3>", unsafe_allow_html=True)

if st.button('Predict'):
  X = RF_model.transform([Data])
  pred = RF_model.predict_proba(X)[0,1]
  churn = pred >= 0.5
  output_prob = float(pred)
  output = bool(churn)
#st.write('Churn: {}, Stayed: {}'.format(output))

